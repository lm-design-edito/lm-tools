{
  "name": "@design-edito/tools",
  "version": "0.1.47",
  "description": "",
  "type": "module",
  "author": "Maxime Fabas",
  "license": "ISC",
  "repository": {
    "type": "git",
    "url": "https://github.com/lm-design-edito/lm-tools"
  },
  "scripts": {
    "_remove:*//": "echo 'REMOVE DIRECTORY'",
    "_remove:scripts": "echo '[_remove:scripts] \\033[1mstarting...\\033[0m' && rm -rf .temp/scripts",
    "_remove:tests": "echo '[_remove:tests] \\033[1mstarting...\\033[0m' && rm -rf .temp/tests",
    "_remove:lib": "echo '[_remove:lib] \\033[1mstarting...\\033[0m' && rm -rf lib",
    "_remove:temp": "echo '[_remove:temp] \\033[1mstarting...\\033[0m' && rm -rf .temp",
    "_make:*//": "echo 'REMOVE =====> MAKE DIRECTORY'",
    "_DEPRECATED_make:scripts": "echo '[_make:scripts] \\033[1mstarting...\\033[0m' && npm run _remove:scripts && mkdir -p .temp/scripts",
    "_DEPRECATED_make:tests": "echo '[_make:tests] \\033[1mstarting...\\033[0m' && npm run _remove:tests && mkdir -p .temp/tests",
    "_DEPRECATED_make:lib": "echo '[_make:lib] \\033[1mstarting...\\033[0m' && npm run _remove:lib && mkdir -p lib",
    "_make:scripts": "echo '[_make:scripts] \\033[1mstarting...\\033[0m' && mkdir -p .temp/scripts",
    "_make:tests": "echo '[_make:tests] \\033[1mstarting...\\033[0m' && mkdir -p .temp/tests",
    "_make:lib": "echo '[_make:lib] \\033[1mstarting...\\033[0m' && mkdir -p lib",
    "_check:*//": "echo 'TYPECHECK ON DIRECTORY'",
    "_check:scripts": "echo '[_check:scripts] \\033[1mstarting...\\033[0m' && npx tsc --project scripts/tsconfig.json --noEmit",
    "_check:tests": "echo '[_check:tests] \\033[1mstarting...\\033[0m' && npx tsc --project tests/tsconfig.json --noEmit",
    "_check:src": "echo '[_check:src] \\033[1mstarting...\\033[0m' && npx tsc --project src/tsconfig.json --noEmit",
    "_bundle:*//": "echo 'RUN ESBUILD ON DIRECTORY OR FILE'",
    "_bundle:scripts": "echo '[_bundle:scripts] \\033[1mstarting...\\033[0m' && npx esbuild scripts/**/*.ts --outdir=.temp/scripts --bundle --platform=node --format=esm --packages=external",
    "_bundle:tests:node": "echo '[_bundle:tests:node] \\033[1mstarting...\\033[0m' && npx esbuild tests/node.ts --outfile=.temp/tests/node.js --bundle --minify --platform=node --format=esm --packages=external",
    "_bundle:tests:browser": "echo '[_bundle:tests:browser] \\033[1mstarting...\\033[0m' && npx esbuild tests/browser.ts --outfile=.temp/tests/browser.js --bundle --minify --format=esm",
    "_bundle:tests:index": "echo '[_bundle:tests:index] \\033[1mstarting...\\033[0m' && mkdir -p .temp/tests && cp tests/index.html .temp/tests/index.html",
    "_bundle:tests//": "echo 'RUN _bundle NODE +++ RUN _bundle BROWSER'",
    "_bundle:tests": "echo '[_bundle:tests] \\033[1mstarting...\\033[0m' && npx concurrently -n '_bundle:tests:node,_bundle:tests:browser' 'npm run _bundle:tests:node' 'npm run _bundle:tests:browser' && npm run _bundle:tests:index",
    "_bundle:src//": "echo 'RUN CUSTOM ESBUILD ON src DIRECTORY ðŸš¨ðŸš¨ .temp/scripts'",
    "_bundle:src": "echo '[_bundle:src] \\033[1mstarting...\\033[0m' && node .temp/scripts/build/index.js",
    "_bundle:watch:tests:*//": "echo 'RUN ESBUILD WATCH ON FILE'",
    "_bundle:watch:tests:node": "echo '[_bundle:watch:tests:node] \\033[1mstarting...\\033[0m' && npm run _bundle:tests:node -- --watch",
    "_bundle:watch:tests:browser": "echo '[_bundle:watch:tests:browser] \\033[1mstarting...\\033[0m' && npm run _bundle:tests:browser -- --watch",
    "_bundle:watch:tests:index": "echo '[_bundle:watch:tests:browser] \\033[1mstarting...\\033[0m' && npm run _bundle:tests:index && npx chokidar 'tests/index.html' -c 'npm run _bundle:tests:index'",
    "_bundle:watch:tests//": "echo 'RUN _watch NODE +++ RUN _watch BROWSER +++ RUN _watch INDEX'",
    "_bundle:watch:tests": "echo '[_bundle:watch:tests] \\033[1mstarting...\\033[0m' && npx concurrently -n '_bundle:watch:tests:node,_bundle:watch:tests:browser,_bundle:watch:tests:index' 'npm run _bundle:watch:tests:node' 'npm run _bundle:watch:tests:browser' 'npm run _bundle:watch:tests:browser'",
    "_tests:node//": "echo 'RUNS .temp/tests/node.js ðŸš¨ðŸš¨ .temp/tests'",
    "_tests:node": "echo '[_tests:node] \\033[1mstarting...\\033[0m' && node .temp/tests/node.js",
    "_tests:headless//": "echo 'RUNS .temp/scripts/tests-headless ðŸš¨ðŸš¨ .temp/scripts'",
    "_tests:headless": "echo '[_tests:headless] \\033[1mstarting...\\033[0m' && PORT=${PORT:-3000} node .temp/scripts/tests-headless/index.js",
    "_tests://": "echo 'RUN _tests NODE =====> RUN _tests HEADLESS ðŸš¨ðŸš¨ .temp/tests, .temp/scripts'",
    "_tests": "echo '[_tests] \\033[1mstarting...\\033[0m' && PORT=${PORT:-3000} npm run _tests:node && npm run _tests:headless",
    "_tests:watch:node//": "echo 'RUN CHOKIDAR ON .temp/tests AND _tests:node ðŸš¨ðŸš¨ .temp/tests'",
    "_tests:watch:node": "echo '[_tests:watch:node] \\033[1mstarting...\\033[0m' && npm run _tests:node && npx chokidar '.temp/tests/**/*' -c 'npm run _tests:node'",
    "_tests:watch:headless//": "echo 'RUN CHOKIDAR ON .temp/tests AND _tests:headless ðŸš¨ðŸš¨ .temp/scripts'",
    "_tests:watch:headless": "echo '[_tests:watch:headless] \\033[1mstarting...\\033[0m' && PORT=${PORT:-3000} npm run _tests:headless && npx chokidar '.temp/tests/**/*' -c 'PORT=${PORT:-3000} npm run _tests:headless'",
    "_tests:watch//": "echo 'RUN _tests:watch:node +++ RUN _tests:watch:headless ðŸš¨ðŸš¨ .temp/tests, .temp/scripts'",
    "_tests:watch": "echo '[_tests:watch] \\033[1mstarting...\\033[0m' && PORT=${PORT:-3000} npx concurrently -n '_tests:watch:node,_tests:watch:headless' 'npm run _tests:watch:node' 'npm run _tests:watch:headless'",
    "_serve:tests//": "echo 'SERVE THE .temp/tests DIRECTORY ðŸš¨ðŸš¨ .temp/tests'",
    "_serve:tests": "echo '[_serve:tests] \\033[1mstarting...\\033[0m' && npx http-server .temp/tests -p ${PORT:-3000} --cors -c-1",
    "_sleep": "echo '\\033[1mSTART SLEEP\\033[0m' && sleep 5 && echo '\\033[1mSTOP SLEEP\\033[0m'",
    "build:*//": "echo 'RUN _make =====> RUN _bundle =====> RUN _check'",
    "build:scripts": "echo '[build:scripts] \\033[1mstarting...\\033[0m' && npm run _make:scripts && npm run _bundle:scripts && npm run _check:scripts",
    "build:tests": "echo '[build:tests] \\033[1mstarting...\\033[0m' && npm run _make:tests && npm run _bundle:tests && npm run _check:tests",
    "build:src//": "echo 'RUN _make =====> RUN _bundle:scripts =====> RUN _bundle:src =====> RUN _check:src'",
    "build:src": "echo '[build:src] \\033[1mstarting...\\033[0m' && npm run _make:lib && npm run _bundle:scripts && npm run _bundle:src && npm run _check:src",
    "build//": "echo 'RUN build:scripts +++ RUN build:tests =====> RUN build:src'",
    "build": "echo '[build] \\033[1mstarting...\\033[0m' && npx concurrently -n 'build:scripts,build:tests' 'npm run build:scripts' 'npm run build:tests' && npm run build:src",
    "tests:node//": "echo 'RUN build:tests =====> RUN _tests:node'",
    "tests:node": "echo '[tests:node] \\033[1mstarting...\\033[0m' && npm run build:tests && npm run _tests:node",
    "tests:headless//": "echo 'RUN build:tests =====> RUN _serve:tests =====> RUN _tests:headless =====> KILL _serve:tests'",
    "tests:headless": "npm run _serve:tests & pid=$! && echo '[tests:headless] \\033[1mstarting...\\033[0m' && PORT=${PORT:-3000} npm run build:tests && npm run _tests:headless; kill $pid",
    "tests//": "echo 'RUN build:tests =====> RUN _serve:tests =====> RUN _tests =====> KILL _serve:tests'",
    "tests": "npm run _serve:tests & pid=$! && echo '[tests] \\033[1mstarting...\\033[0m' && PORT=${PORT:-3000} npm run build:tests && npm run _tests; kill $pid",
    "prepublishOnly//": "echo 'RUN build =====> RUN .temp/scripts/pre-publish'",
    "prepublishOnly": "echo '[prepublishOnly] \\033[1mstarting...\\033[0m' && npm run build && node .temp/scripts/pre-publish/index.js",
    "start//": "echo 'RUN build =====> RUN _serve:tests =====> RUN _bundle:watch:tests ++++ RUN _tests:watch =====> KILL _serve:tests'",
    "start": "npm run _serve:tests & serve_pid=$! && trap 'kill $serve_pid; npm run _remove:temp' EXIT && echo '[start] \\033[1mstarting...\\033[0m' && npm run build && npx concurrently -n '_bundle:watch:tests,_tests:watch' 'npm run _bundle:watch:tests' 'PORT=${PORT:-3000} npm run _tests:watch'"
  },
  "peerDependencies": {
    "chalk": "^5.3.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/chalk": "^2.2.0",
    "@types/jsdom": "^21.1.7",
    "@types/node": "^22.7.6",
    "@types/prompts": "^2.4.9",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.1",
    "@types/semver": "^7.5.8",
    "camelcase": "^8.0.0",
    "chokidar-cli": "^3.0.0",
    "concurrently": "^9.0.1",
    "esbuild": "^0.24.0",
    "jsdom": "^25.0.1",
    "node-fetch": "^3.3.2",
    "prompts": "^2.4.2",
    "puppeteer": "^23.6.0",
    "semver": "^7.6.3",
    "simple-git": "^3.27.0",
    "typescript": "^5.6.3"
  }
}
